using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
//Credit goes to Hardly Difficult for the code and the teaching lesson
namespace PONG {
{
    public partial class Form1 : Form
       //? suggest there can be a null (not needed here)
        const int movementSpeed = 3;
        bool isUpPressedForPlayer1, isDownPressedForPlayer1, isUpPressedForPlayer2, isDownPressedForPlayer2; 
        
        public Form1() { 
        InitializeComponent{};
        }
        //don't forget to add timer on the actual thing
        //Don't forget to lower the tick time to 1
         private void aTimer_Tick(object sender, EvenArgs e) {
           var paddle = aPaddle1;
           var isUpPressed = isUpPressedForPlayer1;
           var isDownPressed = isDownPressedForPlayer1;
           bool? goingUp = null;
            //go to 49:53 during lunch to finish it up, ask Oliver for help if needed
            if(isUpPressed) { 
                goingUp = true;
             }
            //! (bang) not statement. Null is static, true is up, and false is down
            if(isDownPressed) {
                if(!goingUp.HasValue) {
                    goingUp = null;
                } else {
                    goingUp = false;
                }
             }
             //DoMove(paddle, goingUp); 
           //}
           //*= multiple by -1 to 3 and equal result
           //private void Domove(PictureBox paddle, bool? goingUp) { 
                    if(goingUp.HasValue) { 
                        var speed = movementSpeed;
                        if(goingUp.Value) { 
                            speed *= -1; 
            
                //highlight, right click, and extract. Call it DoMove 
                aPaddle1.Location = new Point(aPaddle1.Location.X, aPaddle1.Location.Y - movementSpeed);
               //Keep this one
               paddle.Location = new Point(paddle.Location.X, paddle.Location.Y +speed);
      }
     }
         //== means compare to, = means assing value
         private void Form1_KeyDown(object sender, KeyEventArgs e) {
            var isDown = true; 
        //Once you get on VS, highlight switch-> } (redundant stuff), right click, go to quick action and extract method. Call it CheckKeys(e, ture);  
       //Should say CheckKeys(e, true);
        switch(e.KeyCode) { 
        case Keys.Oemcomma:
        case Keys.W:
        case Keys.Up:
            isUpPressed = isDown;
            break;
        case Keys.O: 
        case Keys.S:
        case Keys.Down:
        isDownPressed = isDown;
     }
      
      
     
     }
         //OEM is "original equipment manufacturer-hardware specific things
         //rinse and repeat what was done above for here 
         private void Form1_KeyUp(object sender, KeyEventArgs e) {
     //Should say CheckKeys(e, false);
      }
         
          private void CheckKeys(KeyEventArgs e, bool isDown) {
        switch(e.KeyCode) { 
        case Keys.Oemcomma:
        case Keys.W:
            isUpPressedForPlayer2 = isDown;
            break;
        case Keys.Up:
            isUpPressedForPlayer1 = isDown;
            break;
        case Keys.O: 
        case Keys.S:
            isDownPressedForPlayer2 = isDown;
            break;
        case Keys.Down:
        isDownPressedForPlayer1 = isDown;
            break;
      }
         }
     }
  }
